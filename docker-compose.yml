version: '3.6'
services:

  telegraf:
    image: telegraf:latest
    user: root
    entrypoint: "telegraf"
    volumes:
      - ./telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8125:8125/udp
    depends_on:
      - influxdb
    links:
      - influxdb
    networks:
      - backend

  influxdb:
    image: influxdb:1.8-alpine
    environment:
      - INFLUXDB_DB=${INFLUXDB_DB}
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
    ports:
      - 8086:8086
    volumes:
      - ./:/imports
      - influxdb_data:/var/lib/influxdb
    networks:
      - backend

  grafana:
    image: grafana/grafana:8.0.2
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/
    depends_on:
      - influxdb
    links:
      - influxdb
    networks:
      - backend

  db:
    image: mysql:8.4
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - TZ=UTC
    ports:
      - 3306:3306
    volumes:
      - mysqldb_data:/var/lib/mysql
      - ./mysql/logs:/var/log/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
      - ./mysql/init/ddl.sql:/docker-entrypoint-initdb.d/1.sql # Create data model
      - ./mysql/init/data.sql:/docker-entrypoint-initdb.d/2.sql # Fill with 1M users
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:${ELK_STACK_VERSION}
    environment:
      - cluster.name=elastic-cluster
      - node.name=es01
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 20
    ports:
      - 9200:9200
      - 9300:9300
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - backend

  logstash:
    image: logstash:${ELK_STACK_VERSION}
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:9600 || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 20
    ports:
      - 5044:5044
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - backend

  filebeat:
    image: docker.elastic.co/beats/filebeat:${ELK_STACK_VERSION}
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./mysql/logs:/var/log/mysql # Replace with the slow log path
      - fb_data:/usr/share/filebeat/data
    depends_on:
      db:
        condition: service_healthy
      logstash:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - backend

  kibana:
    image: kibana:${ELK_STACK_VERSION}
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - 5601:5601
    volumes:
      - kibana_data:/usr/share/kibana/data
    networks:
      - backend

  hsa-app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend

volumes:
  grafana_data: {}
  influxdb_data: {}
  mysqldb_data:
  fb_data:
  es_data:
  kibana_data:

networks:
  backend:
    driver: bridge
